# Generated by Django 5.2.1 on 2025-05-10 12:44

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='JobDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('decision_tree', 'Decision Tree'), ('neural_network', 'Neural Network')], max_length=50)),
                ('model_file', models.FileField(upload_to='ml_models/')),
                ('version', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('accuracy', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('fullname', models.CharField(default='', max_length=300)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('cv', models.FileField(blank=True, null=True, upload_to='cv/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions_set', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cv_match_score', models.FloatField(default=0.0)),
                ('resume', models.FileField(blank=True, null=True, upload_to='resumes/')),
                ('websocket_session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_profile', to='AiQuetionare.customuser')),
                ('skills', models.ManyToManyField(related_name='candidates', to='AiQuetionare.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_number', models.CharField(max_length=20, unique=True)),
                ('question_text', models.TextField()),
                ('answer', models.TextField()),
                ('difficulty', models.IntegerField(choices=[(0, 'Hard'), (1, 'Medium'), (2, 'Easy')])),
                ('embedding', models.JSONField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='AiQuetionare.category')),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('weighted_score', models.FloatField(default=0.0)),
                ('hire_decision', models.BooleanField(blank=True, null=True)),
                ('hire_probability', models.FloatField(blank=True, null=True)),
                ('websocket_group_name', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='AiQuetionare.candidate')),
                ('job_description', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='AiQuetionare.jobdescription')),
                ('current_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currently_in_assessments', to='AiQuetionare.question')),
            ],
        ),
        migrations.AddField(
            model_name='jobdescription',
            name='skills',
            field=models.ManyToManyField(related_name='job_descriptions', to='AiQuetionare.skill'),
        ),
        migrations.CreateModel(
            name='CandidateAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('similarity_score', models.FloatField(null=True)),
                ('question_score', models.FloatField(null=True)),
                ('asked_at', models.DateTimeField(auto_now_add=True)),
                ('response_time_seconds', models.FloatField(blank=True, null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='AiQuetionare.assessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='AiQuetionare.question')),
            ],
            options={
                'unique_together': {('assessment', 'question')},
            },
        ),
        migrations.CreateModel(
            name='QuestionRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='next_questions', to='AiQuetionare.question')),
                ('to_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='previous_questions', to='AiQuetionare.question')),
            ],
            options={
                'unique_together': {('from_question', 'to_question')},
            },
        ),
    ]
